def encode_image(image_path, message, output_path):
    """Hide a secret message inside a BMP image."""
    try:
        # Open the BMP file as binary
        with open(image_path, 'rb') as img_file:
            img_data = bytearray(img_file.read())
 
        # BMP header is 54 bytes
        header_size = 54
        header = img_data[:header_size]
        pixel_data = img_data[header_size:]
 
        # Convert the message to binary + stop signal
        binary_message = ''.join(format(ord(char), '08b') for char in message) + '11111111'
 
        # Encode the message in the LSB of the pixel data
        message_index = 0
        for i in range(len(pixel_data)):
            if message_index < len(binary_message):
                pixel_data[i] = (pixel_data[i] & 0xFE) | int(binary_message[message_index])
                message_index += 1
            else:
                break
 
        # Combine the header and modified pixel data
        encoded_data = header + pixel_data
 
        # Save the modified BMP file
        with open(output_path, 'wb') as output_file:
            output_file.write(encoded_data)
 
        print(f"Message successfully hidden in {output_path}.")
 
    except FileNotFoundError:
        print("Input file not found. Please check the file path.")
    except Exception as e:
        print(f"An error occurred: {e}")
 
 
def decode_image(image_path):
    """Extract a hidden message from a BMP image."""
    try:
        # Open the BMP file as binary
        with open(image_path, 'rb') as img_file:
            img_data = bytearray(img_file.read())
 
        # BMP header is 54 bytes; skip it
        header_size = 54
        pixel_data = img_data[header_size:]
 
        # Extract binary message from LSBs
        binary_message = ''.join(str(byte & 1) for byte in pixel_data)
 
        # Find the stop signal and decode the message
        stop_signal = '11111111'
        end_index = binary_message.find(stop_signal)
        if end_index == -1:
            print("No hidden message found.")
            return None
 
        # Convert binary to text
        binary_message = binary_message[:end_index]
        message = ''.join(chr(int(binary_message[i:i+8], 2)) for i in range(0, len(binary_message), 8))
        return message
 
    except FileNotFoundError:
        print("Input file not found. Please check the file path.")
    except Exception as e:
        print(f"An error occurred: {e}")
 
 
# Test the functions
image_path = r"C:\Users\conso\Documents\DAS\sdf.bmp"  # Use BMP file
output_path = r"encoded_imagebob.bmp"  # Save as BMP
 
encode_image(image_path, "Bmw M5 F10", output_path)
decoded_message = decode_image(output_path)
print(f"Decoded message: {decoded_message}")
 
 